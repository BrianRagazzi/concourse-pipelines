resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

resources:
- name: stemcell-bosh
  type: bosh-io-stemcell
  source:
    name: bosh-vsphere-esxi-ubuntu-trusty-go_agent
    version_family: {{stemcell_version_family}}

- name: stemcell-xenial-bosh
  type: bosh-io-stemcell
  source:
    name: bosh-vsphere-esxi-ubuntu-xenial-go_agent
    version_family: {{xenial_stemcell_version_family}}
- name: ops-manager-pivnet
  type: pivnet
  source:
    api_token: {{pivnet_token}}
    product_slug: ops-manager
    product_version: {{opsman_major_minor_version}}
    sort_by: semver

- name: concourse-manifests
  type: git
  source:
    uri: https://github.com/concourse/concourse-bosh-deployment.git
    branch: master

- name: concourse-release
  type: bosh-io-release
  source:
    repository: concourse/concourse

- name: garden-runc-release
  type: bosh-io-release
  source:
    repository: cloudfoundry/garden-runc-release

- name: postgres-release
  type: bosh-io-release
  source:
    repository: cloudfoundry/postgres-release

- name: syslog-release
  type: bosh-io-release
  source:
    repository: cloudfoundry/syslog-release

- name: ops-manager-s3
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    endpoint: {{s3_endpoint}}
    bucket: {{s3_bucket}}
    regexp: "PCF/ops-manager/pcf-vsphere-(.*).ova"
    disable_ssl: false
    skip_ssl_verification: true



- name: stemcell-s3
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    endpoint: {{s3_endpoint}}
    bucket: {{s3_bucket}}
    disable_ssl: false
    regexp: BOSH/stemcells/bosh-stemcell-(.*)-vsphere-esxi-ubuntu-trusty-go_agent.tgz
    skip_ssl_verification: true

- name: stemcell-xenial-s3
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    endpoint: {{s3_endpoint}}
    bucket: {{s3_bucket}}
    disable_ssl: false
    regexp: BOSH/stemcells/bosh-stemcell-(.*)-vsphere-esxi-ubuntu-xenial-go_agent.tgz
    skip_ssl_verification: true

- name: release-s3
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    endpoint: {{s3_endpoint}}
    bucket: {{s3_bucket}}
    regexp: BOSH/releases/(.*).tgz
    skip_ssl_verification: true

- name: manifest-s3
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    endpoint: {{s3_endpoint}}
    bucket: {{s3_bucket}}
    regexp: BOSH/manifests/(.*).tgz
    skip_ssl_verification: true


jobs:
- name: ops-manager
  plan:
  - get: ops-manager-pivnet
    params:
      globs: ["*.ova"]
  - put: ops-manager-s3
    params:
      file: "ops-manager-pivnet/pcf-vsphere-*.ova"

- name: stemcell-trusty
  plan:
  - get: stemcell-bosh
    trigger: true
    params:
      preserve_filename: true
  - put: stemcell-s3
    params:
      file: stemcell-bosh/*.tgz

- name: stemcell-xenial
  plan:
  - get: stemcell-xenial-bosh
    trigger: true
    params:
      preserve_filename: true
  - put: stemcell-xenial-s3
    params:
      file: stemcell-xenial-bosh/*.tgz

- name: concourse
  plan:
  - get: release
    resource: concourse-release
    trigger: true
    params:
      tarball: true
  - task: rename_file
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfnorm/rootfs
      run:
        path: bash
        args:
        - -c
        - |
          set -eu
          version=$(cat ./release/version)
          mv ./release/release.tgz ./renamed/concourse-${version}.tgz
      inputs:
      - name: release
        path: ""
        optional: false
      outputs:
      - name: renamed
  - put: release-s3
    params:
      file: renamed/concourse-*.tgz
- name: garden-runc-release
  plan:
  - get: release
    resource: garden-runc-release
    trigger: true
    params:
      tarball: true
  - task: rename_file
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfnorm/rootfs
      run:
        path: bash
        args:
        - -c
        - |
          set -eu
          version=$(cat ./release/version)
          mv ./release/release.tgz ./renamed/garden-runc-release-${version}.tgz
      inputs:
      - name: release
        path: ""
        optional: false
      outputs:
      - name: renamed
  - put: release-s3
    params:
      file: renamed/garden-runc-release-*.tgz

- name: syslog-release
  plan:
  - get: release
    resource: syslog-release
    trigger: true
    params:
      tarball: true
  - task: rename_file
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfnorm/rootfs
      run:
        path: bash
        args:
        - -c
        - |
          set -eu
          version=$(cat ./release/version)
          mv ./release/release.tgz ./renamed/syslog-release-${version}.tgz
      inputs:
      - name: release
        path: ""
        optional: false
      outputs:
      - name: renamed
  - put: release-s3
    params:
      file: renamed/syslog-release-*.tgz


- name: postgres-release
  plan:
  - get: release
    resource: postgres-release
    trigger: true
    params:
      tarball: true
  - task: rename_file
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfnorm/rootfs
      run:
        path: bash
        args:
        - -c
        - |
          set -eu
          version=$(cat ./release/version)
          mv ./release/release.tgz ./renamed/postgres-release-${version}.tgz
      inputs:
      - name: release
        path: ""
        optional: false
      outputs:
      - name: renamed
  - put: release-s3
    params:
      file: "renamed/postgres-release-*.tgz"

- name: concourse-manifests
  plan:
  - get: concourse-manifests
    trigger: true
  - task: create-tarball
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfnorm/rootfs
      run:
        path: bash
        args:
        - -c
        - |
          set -eu
          datever=$(date +"%y%m%d%H%M%S")
          echo "Creating tarball with version ${datever}..."
          #tar czf "pcfnorm-rootfs-tarball/pcfnorm-rootfs-${datever}.tgz" -C pcfnorm-rootfs .
          tar czf "out/concourse-deployment-${datever}.tgz" -C concourse-manifests .
      inputs:
      - name: concourse-manifests
        path: ""
        optional: false
      outputs:
      - name: out
        path: ""
  - put: manifest-s3
    params:
      file: "out/concourse-deployment-*.tgz"

