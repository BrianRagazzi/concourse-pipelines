resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

resources:
- name: pipelines-repo
  type: git
  source:
    uri: ((github_repo))
    branch: ((github_branch))
    username: ((github_username))
    password: ((github_token))

- name: pcf-ops-manager
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    endpoint: {{s3_endpoint}}
    bucket: {{s3_bucket}}
    regexp: "PCF/ops-manager/ops-manager-vsphere-(.*).ova"
    disable_ssl: false
    skip_ssl_verification: true

- name: pivotal-container-service
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    endpoint: {{s3_endpoint}}
    bucket: {{s3_bucket}}
    regexp: "PCF/PKS/pivotal-container-service-(.*).pivotal"
    disable_ssl: false
    skip_ssl_verification: true

- name: pivnet-cli
  type: github-release
  source:
    user: pivotal-cf
    repository: pivnet-cli
    access_token: ((github_token)) ## Optional: Removing this will cause you to hit the rate limit


- name: harbor-s3
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    endpoint: {{s3_endpoint}}
    bucket: {{s3_bucket}}
    regexp: "PCF/Tiles/harbor-container-registry-(.*).pivotal"
    disable_ssl: false
    skip_ssl_verification: true


groups:
- name: om-pks
  jobs:
  - deploy-opsman
  - configure-director
  - deploy-director
  - upload-pks
  - configure-pks
  - upload-harbor
  - configure-harbor
  - apply-changes-pks
  - apply-changes-harbor
- name: post-deploy
  jobs:
  - add-pks-user
  - create-k8s-testcluster
  - deploy-pks-test-app
- name: cleanup
  jobs:
  - wipe-env
  - delete-all-clusters

jobs:
- name: deploy-opsman
  plan:
  - aggregate:
    - get: pipelines-repo
    - get: pivnet-opsman-product
      resource: pcf-ops-manager
      params: {globs: ["*.ova"]}
      trigger: false

  - task: deploy
    file: pipelines-repo/tasks/import-opsman/task.yml
    params:
      GOVC_INSECURE: ((vcenter_insecure))
      GOVC_CA_CERT: ((vcenter_ca_cert))
      GOVC_URL: ((vcenter_host))
      GOVC_USERNAME: ((vcenter_usr))
      GOVC_PASSWORD: ((vcenter_pwd))
      GOVC_DATACENTER: ((vcenter_data_center))
      GOVC_DATASTORE: ((om_data_store))
      GOVC_NETWORK: ((om_vm_network))
      GOVC_RESOURCE_POOL: ((om_resource_pool))
      GOVC_HOST: ((om_vm_host))
      OPS_MGR_HOST: ((ops_mgr_host))
      OM_VM_FOLDER: ((om_vm_folder))
      OPS_MGR_SSH_PWD: ((om_ssh_pwd))
      OM_NTP_SERVERS: ((om_ntp_servers))
      OM_DNS_SERVERS: ((om_dns_servers))
      OM_GATEWAY: ((om_gateway))
      OM_NETMASK: ((om_netmask))
      OM_IP: ((om_ip))
      OM_VM_NETWORK: ((om_vm_network))
      OM_VM_NAME: ((om_vm_name))
      OM_RESOURCE_POOL: ((om_resource_pool))
      OPSMAN_DISK_TYPE: ((opsman_disk_type))
      OM_VM_POWER_STATE: ((om_vm_power_state))

- name: configure-director
  plan:
  - aggregate:
    - get: pipelines-repo
    - get: pcf-ops-manager
      params: {globs: []}
      passed: [deploy-opsman]
      trigger: false

  - task: config-opsman-auth
    file: pipelines-repo/tasks/config-opsman/task.yml
    params:
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
      OM_DECRYPTION_PWD: ((om_decryption_pwd))

  - task: configure-director
    file: pipelines-repo/tasks/config-opsdir-pks-nsxt-singleaz/task.yml
    params:
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
      VCENTER_HOST: ((vcenter_host))
      VCENTER_USR: ((vcenter_usr))
      VCENTER_PWD: ((vcenter_pwd))
      VCENTER_DATA_CENTER: ((vcenter_data_center))
      VCENTER_DISK_TYPE: ((vm_disk_type))
      EPHEMERAL_STORAGE_NAMES: ((ephemeral_storage_names))
      PERSISTENT_STORAGE_NAMES: ((persistent_storage_names))
      BOSH_VM_FOLDER:  ((bosh_vm_folder))
      BOSH_TEMPLATE_FOLDER: ((bosh_template_folder))
      BOSH_DISK_PATH: ((bosh_disk_path))
      NSX_NETWORKING_ENABLED: ((nsx_networking_enabled))
      NSX_MODE: ((nsx_mode))
      NSX_ADDRESS: ((nsx_address))
      NSX_USERNAME: ((nsx_username))
      NSX_PASSWORD: ((nsx_password))
      NSX_CA_CERTIFICATE: ((nsx_ca_certificate))
      SSL_VERIFICATION_ENABLED: ((ssl_verification_enabled))
      NTP_SERVERS: ((ntp_servers))
      ENABLE_VM_RESURRECTOR: ((enable_vm_resurrector))
      POST_DEPLOY_ENABLED: ((post_deploy_enabled))
      BOSH_RECREATE_ON_NEXT_DEPLOY: ((bosh_recreate_on_next_deploy))
      RETRY_BOSH_DEPLOYS: ((retry_bosh_deploys))
      KEEP_UNREACHABLE_VMS: ((keep_unreachable_vms))
      MAX_THREADS: ((max_threads))
      DIRECTOR_WORKER_COUNT: ((director_worker_count))
      OPS_DIR_HOSTNAME: ((ops_dir_hostname))
      PAGER_DUTY_ENABLED: ((pager_duty_enabled))
      PAGER_DUTY_SERVICE_KEY: ((pager_duty_service_key))
      PAGER_DUTY_HTTP_PROXY: ((pager_duty_http_proxy))
      HM_EMAIL_ENABLED: ((hm_email_enabled))
      SMTP_HOST: ((smtp_host))
      SMTP_PORT: ((smtp_port))
      SMTP_DOMAIN: ((smtp_domain))
      FROM_ADDRESS: ((from_address))
      RECIPIENTS_ADDRESS: ((recipients_address))
      SMTP_USER: ((smtp_user))
      SMTP_PASSWORD: ((smtp_password))
      SMTP_TLS_ENABLED: ((smtp_tls_enabled))
      BLOBSTORE_TYPE: ((blobstore_type))
      DATABASE_TYPE: ((database_type))
      EXTERNAL_MYSQL_DB_HOST: ((external_mysql_db_host))
      EXTERNAL_MYSQL_DB_PORT: ((external_mysql_db_port))
      EXTERNAL_MYSQL_DB_USER: ((external_mysql_db_user))
      EXTERNAL_MYSQL_DB_PASSWORD: ((external_mysql_db_password))
      EXTERNAL_MYSQL_DB_DATABASE: ((external_mysql_db_database))
      SYSLOG_ENABLED: ((syslog_enabled))
      SYSLOG_ADDRESS: ((syslog_address))
      SYSLOG_PORT: ((syslog_port))
      SYSLOG_TRANSPORT_PROTOCOL: ((syslog_transport_protocol))
      SYSLOG_TLS_ENABLED: ((syslog_tls_enabled))
      SYSLOG_PERMITTED_PEER: ((syslog_permitted_peer))
      SYSLOG_SSL_CA_CERTIFICATE: ((syslog_ssl_ca_certificate))
      ICMP_CHECKS_ENABLED: ((icmp_checks_enabled))
      MGMT_NETWORK_NAME: ((mgmt_network_name))
      MGMT_VCENTER_NETWORK: ((mgmt_vsphere_network))
      MGMT_NW_CIDR: ((mgmt_nw_cidr))
      MGMT_EXCLUDED_RANGE: ((mgmt_excluded_range))
      MGMT_NW_DNS: ((mgmt_nw_dns))
      MGMT_NW_GATEWAY: ((mgmt_nw_gateway))
      MGMT_NW_AZS: ((mgmt_nw_azs))
      PKS_AZ_1: ((az_1_name))
      PKS_AZ_1_CLUSTER_NAME: ((az_1_cluster_name))
      PKS_AZ_1_RP_NAME: ((az_1_rp_name))
      MGMT_AZ: ((mgmt_az_name))
      MGMT_AZ_CLUSTER_NAME: ((mgmt_az_cluster_name))
      MGMT_AZ_RP_NAME: ((mgmt_az_rp_name))
      TRUSTED_CERTIFICATES: ((trusted_certificates))
      GENERATE_VM_PASSWORDS: ((generate_vm_passwords))

- name: deploy-director
  plan:
  - aggregate:
    - get: pipelines-repo
    - get: pcf-ops-manager
      params: {globs: []}
      passed: [configure-director]
      trigger: false

  - task: apply-changes
    file: pipelines-repo/tasks/apply-changes/task.yml
    params:
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))

- name: upload-pks
  plan:
  - aggregate:
    - get: pipelines-repo
    - get: pivnet-product
      resource: pivotal-container-service
      params: {globs: ["*.pivotal"]}
    - get: pcf-ops-manager
      params: {globs: []}
      passed: [deploy-director]
      trigger: false
    - get: pivnet-cli
      params:
        globs:
        - "*linux-amd64*"

  - task: upload-pks-tile
    file: pipelines-repo/tasks/upload-product/task.yml
    params:
      DEBUG: ((debug))
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))

  - task: stage-pks
    file: pipelines-repo/tasks/stage-product/task.yml
    params:
      DEBUG: ((debug))
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
      PRODUCT_IDENTIFIER: "pivotal-container-service"

  - task: upload-stemcell
    file: pipelines-repo/tasks/stemcell-uploader/task.yml
    params:
      DEBUG: ((debug))
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
      PIVNET_API_TOKEN: ((pivnet_token))
      IAAS_TYPE: ((iaas_type))
      PRODUCT_IDENTIFIER: "pivotal-container-service"

- name: configure-pks
  plan:
  - aggregate:
    - get: pipelines-repo
    - get: pivnet-product
      resource: pivotal-container-service
      params: {globs: []}
      passed: [upload-pks]
      trigger: false

  - task: configure-pks
    file: pipelines-repo/tasks/config-pks-singleaz/task.yml
    params:
      MGMT_NETWORK_NAME: ((mgmt_network_name))
      MGMT_AZ_NAME: ((mgmt_az_name))
      AZ_1_NAME: ((az_1_name))
      VCENTER_HOST: ((vcenter_host))
      VCENTER_USR: ((vcenter_usr))
      VCENTER_PWD: ((vcenter_pwd))
      VCENTER_USR_WORKER: ((vcenter_usr_master))
      VCENTER_PWD_WORKER: ((vcenter_pwd_master))
      VCENTER_DATA_CENTER: ((vcenter_data_center))
      OM_DATA_STORE: ((om_data_store))
      BOSH_VM_FOLDER: ((bosh_vm_folder))
      UAA_URL: ((uaa_url))
      SSL_CERT: ((uaa_ssl_cert))
      SSL_PRIVATE_KEY: ((uaa_private_key))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
      OPS_MGR_HOST: ((ops_mgr_host))
      SYSTEM_DOMAIN: ((system_domain))
      UAA_DOMAIN: ((uaa_url))
      NSX_ADDRESS: ((nsx_address))
      NSX_USERNAME: ((nsx_username))
      NSX_PASSWORD: ((nsx_password))
      NSXT_T0_ROUTERID: ((nsxt_t0_routerid))
      NSXT_IP_BLOCK_ID: ((nsxt_ip_block_id))
      NSXT_NODES_IP_BLOCK_ID: ((nsxt_nodes_ip_block_id))
      NSXT_CLOUD_CONFIG_DNS: ((nsxt_cloud_config_dns))
      NSXT_VCENTER_CLUSTER: ((nsxt_vcenter_cluster))
      NSXT_SUPERUSER_CERTIFICATE: ((nsxt_superuser_certificate))
      NSXT_SUPERUSER_PRIVATE_KEY: ((nsxt_superuser_private_key))
      NSXT_CA_CERT: ((nsx_ca_certificate))
      TELEMETRY_SELECTOR: ((telemetry_selector))
      NSXT_FLOATING_IP_POOL_ID: ((nsxt_floating_ip_pool_id))
      SYSLOG_ADDRESS: ((syslog_address))
      SYSLOG_PORT: ((syslog_port))
      SYSLOG_TLS_ENABLED: ((syslog_tls_enabled))
      PKS_SYSLOG_ENABLED: ((syslog_enabled))
      SYSLOG_SSL_CA_CERTIFICATE: ((syslog_ssl_ca_certificate))
      SYSLOG_TRANSPORT_PROTOCOL: ((syslog_transport_protocol))
      VRLI_ENABLED: ((vrli_enabled))
      VRLI_HOST: ((vrli_host))
      VRLI_USE_SSL: ((vrli_use_ssl))
      VRLI_SKIP_CERT_VERIFY: ((vrli_skip_cert_verify))
      VRLI_CA_CERT: ((vrli_ca_cert))
      VRLI_RATE_LIMIT_MSEC: ((vrli_rate_limit_msec))
      PKS_ENABLE_OUTBOUND: ((pks_enable_outbound))

  - task: configure-errands
    file: pipelines-repo/tasks/config-errands/task.yml
    params:
      PRODUCT_NAME: "pivotal-container-service"
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
      ERRANDS_TO_RUN_ON_CHANGE: ((pks_errands_to_run_on_change))
      ERRANDS_TO_DISABLE: ((pks_errands_to_disable))

  - task: add-opsmgr-rootca-to-director
    file: pipelines-repo/tasks/add-opsmgr-rootca-to-director/task.yml
    params:
        OPS_MGR_HOST: ((ops_mgr_host))
        OPS_MGR_USR: ((ops_mgr_usr))
        OPS_MGR_PWD: ((ops_mgr_pwd))
        TRUSTED_CERTIFICATES: ((trusted_certificates))

- name: upload-harbor
  plan:
  - aggregate:
    - get: pipelines-repo
      passed: [apply-changes-pks]
      trigger: false
    - get: pivnet-product
      resource: harbor-s3
      params: {globs: ["*.pivotal"]}
    - get: pivnet-cli
      params:
        globs:
        - "*linux-amd64*"

  - task: upload-tile
    file: pipelines-repo/tasks/upload-product/task.yml
    params:
      DEBUG: ((debug))
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
      PIVNET_API_TOKEN: ((pivnet_token))

  - task: upload-stemcell
    file: pipelines-repo/tasks/stemcell-uploader/task.yml
    params:
      DEBUG: ((debug))
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
      PIVNET_API_TOKEN: ((pivnet_token))
      IAAS_TYPE: ((iaas_type))

- name: configure-harbor
  plan:
  - aggregate:
    - get: pipelines-repo
    - get: pivnet-product
      resource: harbor-s3
      passed: [upload-harbor]
      params: {globs: ["*.pivotal"]}
      trigger: false

  - task: stage-tile
    file: pipelines-repo/tasks/stage-product/task.yml
    params:
      DEBUG: ((debug))
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
      PRODUCT_IDENTIFIER: harbor-container-registry

  - task: config-tile
    file: pipelines-repo/tasks/config-harbor-container-registry/task.yml
    params:
      DEBUG: ((debug))
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
      NETWORK_NAME: ((network_name))
      OTHER_AZS: ((other_azs))
      SINGLETON_JOBS_AZ: ((singleton_jobs_az))
      PRODUCT_NAME: harbor-container-registry
      AUTH_MODE: ((harbor_auth_mode))
      HARBOR_HOSTNAME: ((harbor_hostname))
      HARBOR_DOMAIN: ((harbor_domain))
      HARBOR_ADMIN_PASSWORD: ((harbor_admin_password))
      HARBOR_USE_CLAIR: ((harbor_use_clair))
      HARBOR_USE_NOTARY: ((harbor_use_notary))
      HARBOR_REGISTRY_STORAGE: ((harbor_registry_storage))
      HARBOR_LDAP_AUTH_URL: ((harbor_ldap_auth_
      HARBOR_LDAP_AUTH_VERIFY_CERT: ((harbor_ldap_auth_verify_cert))
      HARBOR_LDAP_AUTH_SEARCHDN: ((harbor_ldap_auth_searchdn))
      HARBOR_LDAP_AUTH_SEARCHPWD:  ((harbor_ldap_auth_searchpwd))
      HARBOR_LDAP_AUTH_BASEDN: ((harbor_ldap_auth_basedn))
      HARBOR_LDAP_AUTH_UID: ((harbor_ldap_auth_uid))
      HARBOR_LDAP_AUTH_FILTER: ((harbor_ldap_auth_filter))
      HARBOR_LDAP_AUTH_SCOPE: ((harbor_ldap_auth_scope))
      HARBOR_LDAP_AUTH_TIMEOUT: ((harbor_ldap_auth_timeout))
      HARBOR_S3_REGISTRY_STORAGE_ACCESS_KEY: ((harbor_s3_registry_storage_access_key))
      HARBOR_S3_REGISTRY_STORAGE_SECRET_KEY: ((harbor_s3_registry_storage_secret_key))
      HARBOR_S3_REGISTRY_STORAGE_REGION: ((harbor_s3_registry_storage_region))
      HARBOR_S3_REGISTRY_STORAGE_ENDPOINT_URL: ((harbor_s3_registry_storage_endpoint_url))
      HARBOR_S3_REGISTRY_STORAGE_BUCKET: ((harbor_s3_registry_storage_bucket))
      HARBOR_S3_REGISTRY_STORAGE_ROOT_DIRECTORY: ((harbor_s3_registry_storage_root_directory))
      HARBOR_CERT_PEM: ((harbor_cert_pem))
      HARBOR_PRIVATE_KEY_PEM: ((harbor_private_key_pem))
      HARBOR_SERVER_CERT_CA_PEM: ((harbor_server_cert_ca_pem))

  - task: config-harbor-errands
    file: pipelines-repo/tasks/config-errands/task.yml
    params:
      DEBUG: ((debug))
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
      PRODUCT_NAME: harbor-container-registry
      ERRANDS_TO_DISABLE: ((harbor_errands_to_disable))
      ERRANDS_TO_RUN_ON_CHANGE: ((harbor_errands_to_run_on_change))

- name: apply-changes-pks
  plan:
  - aggregate:
    - get: pipelines-repo
    - get: pivnet-product
      passed: [configure-pks]
      trigger: false
      resource: pivotal-container-service
      params: {globs: ["*.pivotal"]}


  - task: apply-changes
    file: pipelines-repo/tasks/apply-changes/task.yml
    params:
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))

- name: apply-changes-harbor
  plan:
  - aggregate:
    - get: pipelines-repo
    - get: harbor-s3
      passed: [configure-harbor]
      params: {globs: ["*.pivotal"]}
      trigger: false

  - task: apply-changes
    file: pipelines-repo/tasks/apply-changes/task.yml
    params:
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))

- name: add-pks-user
  plan:
  - aggregate:
    - get: pipelines-repo
      trigger: false
      # passed: [apply-changes]

  - task: configure-pks-cli-user
    file: pipelines-repo/tasks/config-pks-cli-user/task.yml
    params:
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
      PKS_CLI_USERNAME: ((pks_cli_username))
      PKS_CLI_USEREMAIL: ((pks_cli_useremail))
      PKS_CLI_PASSWORD: ((pks_cli_password))
      UAA_URL: ((uaa_url))

- name: create-k8s-testcluster
  plan:
  - aggregate:
    - get: pipelines-repo
      trigger: false
      passed: [add-pks-user]

  - task: create-pks-cluster
    file: pipelines-repo/tasks/create-pks-cluster/task.yml
    params:
      UAA_URL: ((uaa_url))
      PKS_CLI_USERNAME: ((pks_cli_username))
      PKS_CLI_PASSWORD: ((pks_cli_password))
      PKS_SERVICE_PLAN_NAME: ((pks_service_plan_name))
      PKS_CLUSTER_NUMBER_OF_WORKERS: ((pks_cluster_number_of_workers))
      NSX_MANAGER_USERNAME: ((nsx_username))
      NSX_MANAGER_PASSWORD: ((nsx_password))
      NSX_MANAGER_IP: ((nsx_address))
      PKS_KEEP_FAILED_CLUSTER_ALIVE: ((pks_keep_failed_cluster_alive))

- name: deploy-pks-test-app
  plan:
  - aggregate:
    - get: pipelines-repo
      trigger: false
      passed: [create-k8s-testcluster]

  - task: deploy-pks-test-app
    file: pipelines-repo/tasks/deploy-pks-test-app/task.yml
    params:
      UAA_URL: ((uaa_url))
      PKS_CLI_USERNAME: ((pks_cli_username))
      PKS_CLI_PASSWORD: ((pks_cli_password))
      YAML_SOURCE: ((test_app_yaml))
      VALUE_TO_REPLACE: ((test_app_yaml_value_to_replace))
      REPLACEMENT_VALUE: ((test_app_yaml_replacement_value))

- name: delete-all-clusters
  plan:
  - aggregate:
    - get: pipelines-repo
      trigger: false
  - task: delete-all
    file: pipelines-repo/tasks/delete-all-pks-clusters/task.yml
    params:
      UAA_URL: ((uaa_url))
      PKS_CLI_USERNAME: ((pks_cli_username))
      PKS_CLI_PASSWORD: ((pks_cli_password))
      NSX_MANAGER_USERNAME: ((nsx_username))
      NSX_MANAGER_PASSWORD: ((nsx_password))
      NSX_MANAGER_IP: ((nsx_address))

- name: wipe-env
  plan:
  - aggregate:
    - get: pipelines-repo
      trigger: false
  - task: wipe
    file: pipelines-repo/tasks/wipe-env/task.yml
    params:
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
      OPSMAN_IP: ((om_ip))
      GOVC_INSECURE: ((vcenter_insecure))
      GOVC_CA_CERT: ((vcenter_ca_cert))
      GOVC_URL: ((vcenter_host))
      GOVC_USERNAME: ((vcenter_usr))
      GOVC_PASSWORD: ((vcenter_pwd))
      GOVC_DATACENTER: ((vcenter_data_center))
      GOVC_DATASTORE: ((om_data_store))
      GOVC_NETWORK: ((om_vm_network))
      GOVC_RESOURCE_POOL: ((om_resource_pool))
      GOVC_HOST: ((om_vm_host))
