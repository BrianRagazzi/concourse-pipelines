resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

resources:

- name: replicator
  type: github-release
  source:
    user: pivotal-cf
    repository: replicator
    access_token: ((github_token)) ## Optional: Removing this will cause you to hit the rate limit

- name: pivnet-cli
  type: github-release
  source:
    user: pivotal-cf
    repository: pivnet-cli
    access_token: ((github_token)) ## Optional: Removing this will cause you to hit the rate limit

- name: pipelines-repo
  type: git
  source:
    uri: ((github_repo))
    branch: ((github_branch))
    username: ((github_username))
    password: ((github_token))

- name: pivnet-product
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: ((product_name))
    product_version: ((product_version))


jobs:

- name: replicate-and-upload-tile
  plan:
  - aggregate:
    - get: pipelines-repo
    - get: pivnet-product
      resource: pivnet-product
      params:
        globs:
        - "*.pivotal"
      trigger: true
    - get: pivnet-cli
      params:
        globs:
        - "*linux-amd64*"
    - get: replicator
      params:
        globs:
        - "*linux*"

  - task: replicate-and-upload-tile
    file: pipelines-repo/tasks/replicate-and-upload-tile/task.yml
    params:
      DEBUG: ((debug))
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
      PIVNET_API_TOKEN: ((pivnet_token))
      REPLICATOR_NAME: ((replicator_name))

  - task: upload-stemcell
    file: pipelines-repo/tasks/stemcell-uploader/task.yml
    params:
      DEBUG: ((debug))
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
      PIVNET_API_TOKEN: ((pivnet_token))
      IAAS_TYPE: ((iaas_type))

- name: stage-product
  plan:
  - aggregate:
    - get: pipelines-repo
      passed: [replicate-and-upload-tile]
    - get: pivnet-product
      resource: pivnet-product
      params:
        globs:
        - "*.pivotal"
      passed: [replicate-and-upload-tile]
      trigger: true

  - task: stage-tile
    file: pipelines-repo/tasks/stage-product/task.yml
    params:
      DEBUG: ((debug))
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
      PRODUCT_IDENTIFIER: ((product_identifier))

- name: config-product
  plan:
  - aggregate:
    - get: pipelines-repo
    - get: pivnet-product
      resource: pivnet-product
      params:
        globs: []
      passed: [stage-product]
      trigger: true

  - task: config-tile
    file: pipelines-repo/tasks/config-is-tile/task.yml
    params:
      DEBUG: ((debug))
      PRODUCT_IDENTIFIER: ((product_identifier))
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
      NETWORK_NAME: ((network_name))
      SERVICES_NW_AZS: ((other_azs))
      SERVICE_SINGLETON_JOB_AZ: ((singleton_jobs_az))
      OPS_MGR_GENERATE_SSL_ENDPOINT: ((ops_mgr_generate_ssl_endpoint))
      ISOLATION_SEGMENT_DOMAINS: ((isolation_segment_domains))
      REPLICATOR_NAME: ((replicator_name))
      CONTAINER_NETWORKING: ((container_networking))
      ENABLE_GROOTFS: ((enable_grootfs))
      GARDEN_DISK_CLEANUP: ((garden_disk_cleanup))
      GOROUTER_SSL_CIPHERS: ((gorouter_ssl_ciphers))
      HAPROXY_FORWARD_TLS: ((haproxy_forward_tls))
      BACKEND_CA: ((backend_ca))
      HAPROXY_MAX_BUFFER_SIZE: ((haproxy_max_buffer_size))
      HAPROXY_SSL_CIPHERS: ((haproxy_ssl_ciphers))
      NETWORKING_POE_SSL_NAME: ((networking_poe_ssl_name))
      NETWORKING_POE_SSL_CERT_PEM: ((networking_poe_ssl_cert_pem))
      NETWORKING_POE_SSL_CERT_PRIVATE_KEY_PEM: ((networking_poe_ssl_cert_private_key_pem))
      NETWORKING_POINT_OF_ENTRY: ((networking_point_of_entry))
      NFS_VOLUME_DRIVER: ((nfs_volume_driver))
      LDAP_SERVER_HOST: ((ldap_server_host))
      LDAP_SERVER_PORT: ((ldap_server_port))
      LDAP_SERVICE_ACCOUNT_PASSWORD: ((ldap_service_account_password))
      LDAP_SERVICE_ACCOUNT_USER: ((ldap_service_account_user))
      LDAP_USER_FQDN: ((ldap_user_fqdn))
      ROUTER_BACKEND_MAX_CONN: ((router_backend_max_conn))
      ROUTER_CLIENT_CERT_VALIDATION: ((router_client_cert_validation))
      ROUTING_CUSTOM_CA_CERTIFICATES: ((routing_custom_ca_certificates))
      ROUTING_DISABLE_HTTP: ((routing_disable_http))
      ROUTING_MINIMUM_TLS_VERSION: ((routing_minimum_tls_version))
      ROUTING_TABLE_SHARDING_MODE: ((routing_table_sharding_mode))
      ROUTING_TLS_TERMINATION: ((routing_tls_termination))
      SKIP_CERT_VERIFY: ((skip_cert_verify))
      SYSTEM_LOGGING: ((system_logging))
      SYSLOG_HOST: ((syslog_host))
      SYSLOG_PORT: ((syslog_port))
      SUSLOG_PROTOCOL: ((suslog_protocol))
      SYSLOG_RULE: ((syslog_rule))
      SYSLOG_TLS_CA_CERT: ((syslog_tls_ca_cert))
      SYSLOG_TLS_ENABLED: ((syslog_tls_enabled))
      SYSLOG_TLS_PERMITTED_PEER: ((syslog_tls_permitted_peer))
      SYSLOG_USE_TCP_FOR_FILE_FORWARDING_LOCAL_TRANSPORT: ((syslog_use_tcp_for_file_forwarding_local_transport))
      HA_PROXY_STATIC_IPS: ((ha_proxy_static_ips))
      INTERNAL_ONLY_DOMAINS: ((internal_only_domains))
      TRUSTED_DOMAIN_CIDRS: ((trusted_domain_cidrs))
      ROUTER_STATIC_IPS: ((router_static_ips))
      DISABLE_INSECURE_COOKIES: ((disable_insecure_cookies))
      ENABLE_ZIPKIN: ((enable_zipkin))
      ENABLE_WRITE_ACCESS_LOGS: ((enable_write_access_logs))
      REQUEST_TIMEOUT_IN_SECONDS: ((request_timeout_in_seconds))
      MAX_IDLE_CONNECTIONS: ((max_idle_connections))
      EXTRA_HEADERS_TO_LOG: ((extra_headers_to_log))
      DRAIN_WAIT: ((drain_wait))
      LB_HEALTHY_THRESHOLD: ((lb_healthy_threshold))
      EXECUTOR_DISK_CAPACITY: ((executor_disk_capacity))
      EXECUTOR_MEMORY_CAPACITY: ((executor_memory_capacity))
      INSECURE_DOCKER_REGISTRY_LIST: ((insecure_docker_registry_list))
      PLACEMENT_TAG: ((placement_tag))
      ISOLATED_HA_PROXY_INSTANCES: ((isolated_ha_proxy_instances))
      ISOLATED_ROUTER_INSTANCES: ((isolated_router_instances))
      ISOLATED_DIEGO_CELL_INSTANCES: ((isolated_diego_cell_instances))

- name: disable-errands
  plan:
  - aggregate:
    - get: pipelines-repo
      passed: [config-product]
    - get: pivnet-product
      resource: pivnet-product
      params:
        globs: []
      trigger: true

  - task: disable-errands
    file: pipelines-repo/tasks/disable-errands/task.yml
    params:
      DEBUG: ((debug))
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
      PRODUCT_IDENTIFIER: ((product_identifier))
      ERRANDS: ((errands_to_disable))

- name: apply-changes
  plan:
  - aggregate:
    - get: pipelines-repo
      passed: [disable-errands]
    - get: pivnet-product
      resource: pivnet-product
      params:
        globs: []
      passed: [config-product]
      trigger: true

  - task: apply-changes
    file: pipelines-repo/tasks/apply-changes/task.yml
    params:
      DEBUG: ((debug))
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
